// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fgzs-single/internal/dal/model"
)

func newSysPermMenu(db *gorm.DB, opts ...gen.DOOption) sysPermMenu {
	_sysPermMenu := sysPermMenu{}

	_sysPermMenu.sysPermMenuDo.UseDB(db, opts...)
	_sysPermMenu.sysPermMenuDo.UseModel(&model.SysPermMenu{})

	tableName := _sysPermMenu.sysPermMenuDo.TableName()
	_sysPermMenu.ALL = field.NewAsterisk(tableName)
	_sysPermMenu.ID = field.NewInt64(tableName, "id")
	_sysPermMenu.Pid = field.NewInt64(tableName, "pid")
	_sysPermMenu.Type = field.NewString(tableName, "type")
	_sysPermMenu.Title = field.NewString(tableName, "title")
	_sysPermMenu.Name = field.NewString(tableName, "name")
	_sysPermMenu.Path = field.NewString(tableName, "path")
	_sysPermMenu.Icon = field.NewString(tableName, "icon")
	_sysPermMenu.MenuType = field.NewString(tableName, "menu_type")
	_sysPermMenu.URL = field.NewString(tableName, "url")
	_sysPermMenu.Component = field.NewString(tableName, "component")
	_sysPermMenu.Extend = field.NewString(tableName, "extend")
	_sysPermMenu.Remark = field.NewString(tableName, "remark")
	_sysPermMenu.Sort = field.NewInt64(tableName, "sort")
	_sysPermMenu.Status = field.NewInt32(tableName, "status")
	_sysPermMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_sysPermMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysPermMenu.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysPermMenu.fillFieldMap()

	return _sysPermMenu
}

type sysPermMenu struct {
	sysPermMenuDo sysPermMenuDo

	ALL       field.Asterisk
	ID        field.Int64
	Pid       field.Int64  // 上级菜单
	Type      field.String // 类型:menu_dir=菜单目录,menu=菜单项,button=页面按钮
	Title     field.String // 标题
	Name      field.String // 规则名称
	Path      field.String // 路由路径
	Icon      field.String // 图标
	MenuType  field.String // 菜单类型:tab=选项卡,link=链接,iframe=Iframe
	URL       field.String // Url
	Component field.String // 组件路径
	Extend    field.String // 扩展属性:none=无,add_rules_only=只添加为路由,add_menu_only=只添加为菜单
	Remark    field.String // 备注
	Sort      field.Int64  // 权重(排序)
	Status    field.Int32  // 0=禁用 1=开启
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysPermMenu) Table(newTableName string) *sysPermMenu {
	s.sysPermMenuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysPermMenu) As(alias string) *sysPermMenu {
	s.sysPermMenuDo.DO = *(s.sysPermMenuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysPermMenu) updateTableName(table string) *sysPermMenu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Pid = field.NewInt64(table, "pid")
	s.Type = field.NewString(table, "type")
	s.Title = field.NewString(table, "title")
	s.Name = field.NewString(table, "name")
	s.Path = field.NewString(table, "path")
	s.Icon = field.NewString(table, "icon")
	s.MenuType = field.NewString(table, "menu_type")
	s.URL = field.NewString(table, "url")
	s.Component = field.NewString(table, "component")
	s.Extend = field.NewString(table, "extend")
	s.Remark = field.NewString(table, "remark")
	s.Sort = field.NewInt64(table, "sort")
	s.Status = field.NewInt32(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysPermMenu) WithContext(ctx context.Context) *sysPermMenuDo {
	return s.sysPermMenuDo.WithContext(ctx)
}

func (s sysPermMenu) TableName() string { return s.sysPermMenuDo.TableName() }

func (s sysPermMenu) Alias() string { return s.sysPermMenuDo.Alias() }

func (s *sysPermMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysPermMenu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["type"] = s.Type
	s.fieldMap["title"] = s.Title
	s.fieldMap["name"] = s.Name
	s.fieldMap["path"] = s.Path
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["menu_type"] = s.MenuType
	s.fieldMap["url"] = s.URL
	s.fieldMap["component"] = s.Component
	s.fieldMap["extend"] = s.Extend
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysPermMenu) clone(db *gorm.DB) sysPermMenu {
	s.sysPermMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysPermMenu) replaceDB(db *gorm.DB) sysPermMenu {
	s.sysPermMenuDo.ReplaceDB(db)
	return s
}

type sysPermMenuDo struct{ gen.DO }

func (s sysPermMenuDo) Debug() *sysPermMenuDo {
	return s.withDO(s.DO.Debug())
}

func (s sysPermMenuDo) WithContext(ctx context.Context) *sysPermMenuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysPermMenuDo) ReadDB() *sysPermMenuDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysPermMenuDo) WriteDB() *sysPermMenuDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysPermMenuDo) Session(config *gorm.Session) *sysPermMenuDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysPermMenuDo) Clauses(conds ...clause.Expression) *sysPermMenuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysPermMenuDo) Returning(value interface{}, columns ...string) *sysPermMenuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysPermMenuDo) Not(conds ...gen.Condition) *sysPermMenuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysPermMenuDo) Or(conds ...gen.Condition) *sysPermMenuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysPermMenuDo) Select(conds ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysPermMenuDo) Where(conds ...gen.Condition) *sysPermMenuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysPermMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysPermMenuDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysPermMenuDo) Order(conds ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysPermMenuDo) Distinct(cols ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysPermMenuDo) Omit(cols ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysPermMenuDo) Join(table schema.Tabler, on ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysPermMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysPermMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysPermMenuDo) Group(cols ...field.Expr) *sysPermMenuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysPermMenuDo) Having(conds ...gen.Condition) *sysPermMenuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysPermMenuDo) Limit(limit int) *sysPermMenuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysPermMenuDo) Offset(offset int) *sysPermMenuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysPermMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysPermMenuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysPermMenuDo) Unscoped() *sysPermMenuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysPermMenuDo) Create(values ...*model.SysPermMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysPermMenuDo) CreateInBatches(values []*model.SysPermMenu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysPermMenuDo) Save(values ...*model.SysPermMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysPermMenuDo) First() (*model.SysPermMenu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPermMenu), nil
	}
}

func (s sysPermMenuDo) Take() (*model.SysPermMenu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPermMenu), nil
	}
}

func (s sysPermMenuDo) Last() (*model.SysPermMenu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPermMenu), nil
	}
}

func (s sysPermMenuDo) Find() ([]*model.SysPermMenu, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysPermMenu), err
}

func (s sysPermMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysPermMenu, err error) {
	buf := make([]*model.SysPermMenu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysPermMenuDo) FindInBatches(result *[]*model.SysPermMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysPermMenuDo) Attrs(attrs ...field.AssignExpr) *sysPermMenuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysPermMenuDo) Assign(attrs ...field.AssignExpr) *sysPermMenuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysPermMenuDo) Joins(fields ...field.RelationField) *sysPermMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysPermMenuDo) Preload(fields ...field.RelationField) *sysPermMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysPermMenuDo) FirstOrInit() (*model.SysPermMenu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPermMenu), nil
	}
}

func (s sysPermMenuDo) FirstOrCreate() (*model.SysPermMenu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPermMenu), nil
	}
}

func (s sysPermMenuDo) FindByPage(offset int, limit int) (result []*model.SysPermMenu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysPermMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysPermMenuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysPermMenuDo) Delete(models ...*model.SysPermMenu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysPermMenuDo) withDO(do gen.Dao) *sysPermMenuDo {
	s.DO = *do.(*gen.DO)
	return s
}
