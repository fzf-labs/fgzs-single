// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fgzs-single/internal/dal/model"
)

func newSensitiveWordCategory(db *gorm.DB, opts ...gen.DOOption) sensitiveWordCategory {
	_sensitiveWordCategory := sensitiveWordCategory{}

	_sensitiveWordCategory.sensitiveWordCategoryDo.UseDB(db, opts...)
	_sensitiveWordCategory.sensitiveWordCategoryDo.UseModel(&model.SensitiveWordCategory{})

	tableName := _sensitiveWordCategory.sensitiveWordCategoryDo.TableName()
	_sensitiveWordCategory.ALL = field.NewAsterisk(tableName)
	_sensitiveWordCategory.ID = field.NewInt64(tableName, "id")
	_sensitiveWordCategory.Name = field.NewString(tableName, "name")
	_sensitiveWordCategory.CreatedAt = field.NewTime(tableName, "created_at")
	_sensitiveWordCategory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sensitiveWordCategory.DeletedAt = field.NewField(tableName, "deleted_at")

	_sensitiveWordCategory.fillFieldMap()

	return _sensitiveWordCategory
}

type sensitiveWordCategory struct {
	sensitiveWordCategoryDo sensitiveWordCategoryDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String // 名称
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sensitiveWordCategory) Table(newTableName string) *sensitiveWordCategory {
	s.sensitiveWordCategoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sensitiveWordCategory) As(alias string) *sensitiveWordCategory {
	s.sensitiveWordCategoryDo.DO = *(s.sensitiveWordCategoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sensitiveWordCategory) updateTableName(table string) *sensitiveWordCategory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sensitiveWordCategory) WithContext(ctx context.Context) *sensitiveWordCategoryDo {
	return s.sensitiveWordCategoryDo.WithContext(ctx)
}

func (s sensitiveWordCategory) TableName() string { return s.sensitiveWordCategoryDo.TableName() }

func (s sensitiveWordCategory) Alias() string { return s.sensitiveWordCategoryDo.Alias() }

func (s *sensitiveWordCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sensitiveWordCategory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sensitiveWordCategory) clone(db *gorm.DB) sensitiveWordCategory {
	s.sensitiveWordCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sensitiveWordCategory) replaceDB(db *gorm.DB) sensitiveWordCategory {
	s.sensitiveWordCategoryDo.ReplaceDB(db)
	return s
}

type sensitiveWordCategoryDo struct{ gen.DO }

func (s sensitiveWordCategoryDo) Debug() *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Debug())
}

func (s sensitiveWordCategoryDo) WithContext(ctx context.Context) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sensitiveWordCategoryDo) ReadDB() *sensitiveWordCategoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s sensitiveWordCategoryDo) WriteDB() *sensitiveWordCategoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s sensitiveWordCategoryDo) Session(config *gorm.Session) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s sensitiveWordCategoryDo) Clauses(conds ...clause.Expression) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sensitiveWordCategoryDo) Returning(value interface{}, columns ...string) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sensitiveWordCategoryDo) Not(conds ...gen.Condition) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sensitiveWordCategoryDo) Or(conds ...gen.Condition) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sensitiveWordCategoryDo) Select(conds ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sensitiveWordCategoryDo) Where(conds ...gen.Condition) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sensitiveWordCategoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sensitiveWordCategoryDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sensitiveWordCategoryDo) Order(conds ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sensitiveWordCategoryDo) Distinct(cols ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sensitiveWordCategoryDo) Omit(cols ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sensitiveWordCategoryDo) Join(table schema.Tabler, on ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sensitiveWordCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sensitiveWordCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sensitiveWordCategoryDo) Group(cols ...field.Expr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sensitiveWordCategoryDo) Having(conds ...gen.Condition) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sensitiveWordCategoryDo) Limit(limit int) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sensitiveWordCategoryDo) Offset(offset int) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sensitiveWordCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sensitiveWordCategoryDo) Unscoped() *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sensitiveWordCategoryDo) Create(values ...*model.SensitiveWordCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sensitiveWordCategoryDo) CreateInBatches(values []*model.SensitiveWordCategory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sensitiveWordCategoryDo) Save(values ...*model.SensitiveWordCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sensitiveWordCategoryDo) First() (*model.SensitiveWordCategory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensitiveWordCategory), nil
	}
}

func (s sensitiveWordCategoryDo) Take() (*model.SensitiveWordCategory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensitiveWordCategory), nil
	}
}

func (s sensitiveWordCategoryDo) Last() (*model.SensitiveWordCategory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensitiveWordCategory), nil
	}
}

func (s sensitiveWordCategoryDo) Find() ([]*model.SensitiveWordCategory, error) {
	result, err := s.DO.Find()
	return result.([]*model.SensitiveWordCategory), err
}

func (s sensitiveWordCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SensitiveWordCategory, err error) {
	buf := make([]*model.SensitiveWordCategory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sensitiveWordCategoryDo) FindInBatches(result *[]*model.SensitiveWordCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sensitiveWordCategoryDo) Attrs(attrs ...field.AssignExpr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sensitiveWordCategoryDo) Assign(attrs ...field.AssignExpr) *sensitiveWordCategoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sensitiveWordCategoryDo) Joins(fields ...field.RelationField) *sensitiveWordCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sensitiveWordCategoryDo) Preload(fields ...field.RelationField) *sensitiveWordCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sensitiveWordCategoryDo) FirstOrInit() (*model.SensitiveWordCategory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensitiveWordCategory), nil
	}
}

func (s sensitiveWordCategoryDo) FirstOrCreate() (*model.SensitiveWordCategory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensitiveWordCategory), nil
	}
}

func (s sensitiveWordCategoryDo) FindByPage(offset int, limit int) (result []*model.SensitiveWordCategory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sensitiveWordCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sensitiveWordCategoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sensitiveWordCategoryDo) Delete(models ...*model.SensitiveWordCategory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sensitiveWordCategoryDo) withDO(do gen.Dao) *sensitiveWordCategoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
