// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fgzs-single/internal/dal/model"
)

func newUserFeedback(db *gorm.DB, opts ...gen.DOOption) userFeedback {
	_userFeedback := userFeedback{}

	_userFeedback.userFeedbackDo.UseDB(db, opts...)
	_userFeedback.userFeedbackDo.UseModel(&model.UserFeedback{})

	tableName := _userFeedback.userFeedbackDo.TableName()
	_userFeedback.ALL = field.NewAsterisk(tableName)
	_userFeedback.ID = field.NewInt64(tableName, "id")
	_userFeedback.UID = field.NewString(tableName, "uid")
	_userFeedback.Content = field.NewString(tableName, "content")
	_userFeedback.Remark = field.NewString(tableName, "remark")
	_userFeedback.CreatedAt = field.NewTime(tableName, "created_at")
	_userFeedback.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userFeedback.DeletedAt = field.NewField(tableName, "deleted_at")

	_userFeedback.fillFieldMap()

	return _userFeedback
}

type userFeedback struct {
	userFeedbackDo userFeedbackDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.String // 用户ID
	Content   field.String // 反馈内容
	Remark    field.String // 备注内容
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (u userFeedback) Table(newTableName string) *userFeedback {
	u.userFeedbackDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFeedback) As(alias string) *userFeedback {
	u.userFeedbackDo.DO = *(u.userFeedbackDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFeedback) updateTableName(table string) *userFeedback {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewString(table, "uid")
	u.Content = field.NewString(table, "content")
	u.Remark = field.NewString(table, "remark")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userFeedback) WithContext(ctx context.Context) *userFeedbackDo {
	return u.userFeedbackDo.WithContext(ctx)
}

func (u userFeedback) TableName() string { return u.userFeedbackDo.TableName() }

func (u userFeedback) Alias() string { return u.userFeedbackDo.Alias() }

func (u *userFeedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFeedback) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["content"] = u.Content
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userFeedback) clone(db *gorm.DB) userFeedback {
	u.userFeedbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFeedback) replaceDB(db *gorm.DB) userFeedback {
	u.userFeedbackDo.ReplaceDB(db)
	return u
}

type userFeedbackDo struct{ gen.DO }

func (u userFeedbackDo) Debug() *userFeedbackDo {
	return u.withDO(u.DO.Debug())
}

func (u userFeedbackDo) WithContext(ctx context.Context) *userFeedbackDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFeedbackDo) ReadDB() *userFeedbackDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFeedbackDo) WriteDB() *userFeedbackDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFeedbackDo) Session(config *gorm.Session) *userFeedbackDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFeedbackDo) Clauses(conds ...clause.Expression) *userFeedbackDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFeedbackDo) Returning(value interface{}, columns ...string) *userFeedbackDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFeedbackDo) Not(conds ...gen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFeedbackDo) Or(conds ...gen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFeedbackDo) Select(conds ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFeedbackDo) Where(conds ...gen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFeedbackDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userFeedbackDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userFeedbackDo) Order(conds ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFeedbackDo) Distinct(cols ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFeedbackDo) Omit(cols ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFeedbackDo) Join(table schema.Tabler, on ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFeedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFeedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFeedbackDo) Group(cols ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFeedbackDo) Having(conds ...gen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFeedbackDo) Limit(limit int) *userFeedbackDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFeedbackDo) Offset(offset int) *userFeedbackDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFeedbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userFeedbackDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFeedbackDo) Unscoped() *userFeedbackDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFeedbackDo) Create(values ...*model.UserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFeedbackDo) CreateInBatches(values []*model.UserFeedback, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFeedbackDo) Save(values ...*model.UserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFeedbackDo) First() (*model.UserFeedback, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) Take() (*model.UserFeedback, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) Last() (*model.UserFeedback, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) Find() ([]*model.UserFeedback, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFeedback), err
}

func (u userFeedbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFeedback, err error) {
	buf := make([]*model.UserFeedback, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFeedbackDo) FindInBatches(result *[]*model.UserFeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFeedbackDo) Attrs(attrs ...field.AssignExpr) *userFeedbackDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFeedbackDo) Assign(attrs ...field.AssignExpr) *userFeedbackDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFeedbackDo) Joins(fields ...field.RelationField) *userFeedbackDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFeedbackDo) Preload(fields ...field.RelationField) *userFeedbackDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFeedbackDo) FirstOrInit() (*model.UserFeedback, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) FirstOrCreate() (*model.UserFeedback, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFeedback), nil
	}
}

func (u userFeedbackDo) FindByPage(offset int, limit int) (result []*model.UserFeedback, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFeedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFeedbackDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFeedbackDo) Delete(models ...*model.UserFeedback) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFeedbackDo) withDO(do gen.Dao) *userFeedbackDo {
	u.DO = *do.(*gen.DO)
	return u
}
