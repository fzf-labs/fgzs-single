// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fgzs-single/internal/dal/model"
)

func newTinyURL(db *gorm.DB, opts ...gen.DOOption) tinyURL {
	_tinyURL := tinyURL{}

	_tinyURL.tinyURLDo.UseDB(db, opts...)
	_tinyURL.tinyURLDo.UseModel(&model.TinyURL{})

	tableName := _tinyURL.tinyURLDo.TableName()
	_tinyURL.ALL = field.NewAsterisk(tableName)
	_tinyURL.ID = field.NewInt64(tableName, "id")
	_tinyURL.OriginalURL = field.NewString(tableName, "original_url")
	_tinyURL.TinyURL = field.NewString(tableName, "tiny_url")
	_tinyURL.Expired = field.NewInt64(tableName, "expired")
	_tinyURL.Number = field.NewInt64(tableName, "number")
	_tinyURL.CreatedAt = field.NewTime(tableName, "created_at")
	_tinyURL.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tinyURL.fillFieldMap()

	return _tinyURL
}

type tinyURL struct {
	tinyURLDo tinyURLDo

	ALL         field.Asterisk
	ID          field.Int64
	OriginalURL field.String // 原始链接
	TinyURL     field.String // 短链
	Expired     field.Int64  // 过期时间
	Number      field.Int64  // 跳转次数
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (t tinyURL) Table(newTableName string) *tinyURL {
	t.tinyURLDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tinyURL) As(alias string) *tinyURL {
	t.tinyURLDo.DO = *(t.tinyURLDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tinyURL) updateTableName(table string) *tinyURL {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.OriginalURL = field.NewString(table, "original_url")
	t.TinyURL = field.NewString(table, "tiny_url")
	t.Expired = field.NewInt64(table, "expired")
	t.Number = field.NewInt64(table, "number")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tinyURL) WithContext(ctx context.Context) *tinyURLDo { return t.tinyURLDo.WithContext(ctx) }

func (t tinyURL) TableName() string { return t.tinyURLDo.TableName() }

func (t tinyURL) Alias() string { return t.tinyURLDo.Alias() }

func (t *tinyURL) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tinyURL) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["original_url"] = t.OriginalURL
	t.fieldMap["tiny_url"] = t.TinyURL
	t.fieldMap["expired"] = t.Expired
	t.fieldMap["number"] = t.Number
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tinyURL) clone(db *gorm.DB) tinyURL {
	t.tinyURLDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tinyURL) replaceDB(db *gorm.DB) tinyURL {
	t.tinyURLDo.ReplaceDB(db)
	return t
}

type tinyURLDo struct{ gen.DO }

func (t tinyURLDo) Debug() *tinyURLDo {
	return t.withDO(t.DO.Debug())
}

func (t tinyURLDo) WithContext(ctx context.Context) *tinyURLDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tinyURLDo) ReadDB() *tinyURLDo {
	return t.Clauses(dbresolver.Read)
}

func (t tinyURLDo) WriteDB() *tinyURLDo {
	return t.Clauses(dbresolver.Write)
}

func (t tinyURLDo) Session(config *gorm.Session) *tinyURLDo {
	return t.withDO(t.DO.Session(config))
}

func (t tinyURLDo) Clauses(conds ...clause.Expression) *tinyURLDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tinyURLDo) Returning(value interface{}, columns ...string) *tinyURLDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tinyURLDo) Not(conds ...gen.Condition) *tinyURLDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tinyURLDo) Or(conds ...gen.Condition) *tinyURLDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tinyURLDo) Select(conds ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tinyURLDo) Where(conds ...gen.Condition) *tinyURLDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tinyURLDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tinyURLDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tinyURLDo) Order(conds ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tinyURLDo) Distinct(cols ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tinyURLDo) Omit(cols ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tinyURLDo) Join(table schema.Tabler, on ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tinyURLDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tinyURLDo) RightJoin(table schema.Tabler, on ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tinyURLDo) Group(cols ...field.Expr) *tinyURLDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tinyURLDo) Having(conds ...gen.Condition) *tinyURLDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tinyURLDo) Limit(limit int) *tinyURLDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tinyURLDo) Offset(offset int) *tinyURLDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tinyURLDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tinyURLDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tinyURLDo) Unscoped() *tinyURLDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tinyURLDo) Create(values ...*model.TinyURL) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tinyURLDo) CreateInBatches(values []*model.TinyURL, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tinyURLDo) Save(values ...*model.TinyURL) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tinyURLDo) First() (*model.TinyURL, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TinyURL), nil
	}
}

func (t tinyURLDo) Take() (*model.TinyURL, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TinyURL), nil
	}
}

func (t tinyURLDo) Last() (*model.TinyURL, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TinyURL), nil
	}
}

func (t tinyURLDo) Find() ([]*model.TinyURL, error) {
	result, err := t.DO.Find()
	return result.([]*model.TinyURL), err
}

func (t tinyURLDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TinyURL, err error) {
	buf := make([]*model.TinyURL, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tinyURLDo) FindInBatches(result *[]*model.TinyURL, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tinyURLDo) Attrs(attrs ...field.AssignExpr) *tinyURLDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tinyURLDo) Assign(attrs ...field.AssignExpr) *tinyURLDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tinyURLDo) Joins(fields ...field.RelationField) *tinyURLDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tinyURLDo) Preload(fields ...field.RelationField) *tinyURLDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tinyURLDo) FirstOrInit() (*model.TinyURL, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TinyURL), nil
	}
}

func (t tinyURLDo) FirstOrCreate() (*model.TinyURL, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TinyURL), nil
	}
}

func (t tinyURLDo) FindByPage(offset int, limit int) (result []*model.TinyURL, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tinyURLDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tinyURLDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tinyURLDo) Delete(models ...*model.TinyURL) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tinyURLDo) withDO(do gen.Dao) *tinyURLDo {
	t.DO = *do.(*gen.DO)
	return t
}
