// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fgzs-single/internal/dal/model"
)

func newAsset(db *gorm.DB, opts ...gen.DOOption) asset {
	_asset := asset{}

	_asset.assetDo.UseDB(db, opts...)
	_asset.assetDo.UseModel(&model.Asset{})

	tableName := _asset.assetDo.TableName()
	_asset.ALL = field.NewAsterisk(tableName)
	_asset.ID = field.NewInt64(tableName, "id")
	_asset.UID = field.NewString(tableName, "uid")
	_asset.AssetType = field.NewInt32(tableName, "asset_type")
	_asset.Amount = field.NewInt64(tableName, "amount")
	_asset.Version = field.NewInt64(tableName, "version")
	_asset.Status = field.NewInt32(tableName, "status")
	_asset.CreatedAt = field.NewTime(tableName, "created_at")
	_asset.UpdatedAt = field.NewTime(tableName, "updated_at")
	_asset.DeletedAt = field.NewField(tableName, "deleted_at")

	_asset.fillFieldMap()

	return _asset
}

type asset struct {
	assetDo assetDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.String // 用户id
	AssetType field.Int32  // 资产类型
	Amount    field.Int64  // 资产值
	Version   field.Int64  // 乐观锁
	Status    field.Int32  // 状态(1 正常 2冻结)
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (a asset) Table(newTableName string) *asset {
	a.assetDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a asset) As(alias string) *asset {
	a.assetDo.DO = *(a.assetDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *asset) updateTableName(table string) *asset {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UID = field.NewString(table, "uid")
	a.AssetType = field.NewInt32(table, "asset_type")
	a.Amount = field.NewInt64(table, "amount")
	a.Version = field.NewInt64(table, "version")
	a.Status = field.NewInt32(table, "status")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *asset) WithContext(ctx context.Context) *assetDo { return a.assetDo.WithContext(ctx) }

func (a asset) TableName() string { return a.assetDo.TableName() }

func (a asset) Alias() string { return a.assetDo.Alias() }

func (a *asset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *asset) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["uid"] = a.UID
	a.fieldMap["asset_type"] = a.AssetType
	a.fieldMap["amount"] = a.Amount
	a.fieldMap["version"] = a.Version
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a asset) clone(db *gorm.DB) asset {
	a.assetDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a asset) replaceDB(db *gorm.DB) asset {
	a.assetDo.ReplaceDB(db)
	return a
}

type assetDo struct{ gen.DO }

func (a assetDo) Debug() *assetDo {
	return a.withDO(a.DO.Debug())
}

func (a assetDo) WithContext(ctx context.Context) *assetDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a assetDo) ReadDB() *assetDo {
	return a.Clauses(dbresolver.Read)
}

func (a assetDo) WriteDB() *assetDo {
	return a.Clauses(dbresolver.Write)
}

func (a assetDo) Session(config *gorm.Session) *assetDo {
	return a.withDO(a.DO.Session(config))
}

func (a assetDo) Clauses(conds ...clause.Expression) *assetDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a assetDo) Returning(value interface{}, columns ...string) *assetDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a assetDo) Not(conds ...gen.Condition) *assetDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a assetDo) Or(conds ...gen.Condition) *assetDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a assetDo) Select(conds ...field.Expr) *assetDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a assetDo) Where(conds ...gen.Condition) *assetDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a assetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *assetDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a assetDo) Order(conds ...field.Expr) *assetDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a assetDo) Distinct(cols ...field.Expr) *assetDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a assetDo) Omit(cols ...field.Expr) *assetDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a assetDo) Join(table schema.Tabler, on ...field.Expr) *assetDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a assetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *assetDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a assetDo) RightJoin(table schema.Tabler, on ...field.Expr) *assetDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a assetDo) Group(cols ...field.Expr) *assetDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a assetDo) Having(conds ...gen.Condition) *assetDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a assetDo) Limit(limit int) *assetDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a assetDo) Offset(offset int) *assetDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a assetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *assetDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a assetDo) Unscoped() *assetDo {
	return a.withDO(a.DO.Unscoped())
}

func (a assetDo) Create(values ...*model.Asset) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a assetDo) CreateInBatches(values []*model.Asset, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a assetDo) Save(values ...*model.Asset) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a assetDo) First() (*model.Asset, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Asset), nil
	}
}

func (a assetDo) Take() (*model.Asset, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Asset), nil
	}
}

func (a assetDo) Last() (*model.Asset, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Asset), nil
	}
}

func (a assetDo) Find() ([]*model.Asset, error) {
	result, err := a.DO.Find()
	return result.([]*model.Asset), err
}

func (a assetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Asset, err error) {
	buf := make([]*model.Asset, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a assetDo) FindInBatches(result *[]*model.Asset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a assetDo) Attrs(attrs ...field.AssignExpr) *assetDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a assetDo) Assign(attrs ...field.AssignExpr) *assetDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a assetDo) Joins(fields ...field.RelationField) *assetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a assetDo) Preload(fields ...field.RelationField) *assetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a assetDo) FirstOrInit() (*model.Asset, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Asset), nil
	}
}

func (a assetDo) FirstOrCreate() (*model.Asset, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Asset), nil
	}
}

func (a assetDo) FindByPage(offset int, limit int) (result []*model.Asset, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a assetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a assetDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a assetDo) Delete(models ...*model.Asset) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *assetDo) withDO(do gen.Dao) *assetDo {
	a.DO = *do.(*gen.DO)
	return a
}
