// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fgzs-single/internal/dal/model"
)

func newPaymentRecord(db *gorm.DB, opts ...gen.DOOption) paymentRecord {
	_paymentRecord := paymentRecord{}

	_paymentRecord.paymentRecordDo.UseDB(db, opts...)
	_paymentRecord.paymentRecordDo.UseModel(&model.PaymentRecord{})

	tableName := _paymentRecord.paymentRecordDo.TableName()
	_paymentRecord.ALL = field.NewAsterisk(tableName)
	_paymentRecord.ID = field.NewInt64(tableName, "id")
	_paymentRecord.Key = field.NewString(tableName, "key")
	_paymentRecord.OutTradeNo = field.NewString(tableName, "out_trade_no")
	_paymentRecord.TradeNo = field.NewString(tableName, "trade_no")
	_paymentRecord.PayMethod = field.NewString(tableName, "pay_method")
	_paymentRecord.TotalFee = field.NewInt64(tableName, "total_fee")
	_paymentRecord.Description = field.NewString(tableName, "description")
	_paymentRecord.ClientIP = field.NewString(tableName, "client_ip")
	_paymentRecord.OrderTime = field.NewTime(tableName, "order_time")
	_paymentRecord.ExpireTime = field.NewTime(tableName, "expire_time")
	_paymentRecord.PayTime = field.NewTime(tableName, "pay_time")
	_paymentRecord.NotifyTime = field.NewTime(tableName, "notify_time")
	_paymentRecord.Extension = field.NewField(tableName, "extension")
	_paymentRecord.Status = field.NewInt32(tableName, "status")
	_paymentRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_paymentRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_paymentRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_paymentRecord.fillFieldMap()

	return _paymentRecord
}

type paymentRecord struct {
	paymentRecordDo paymentRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	Key         field.String // 流水号
	OutTradeNo  field.String // 支付订单号
	TradeNo     field.String // 第三方支付的流水号
	PayMethod   field.String // 支付方式
	TotalFee    field.Int64  // 支付金额，整数方式保存(分)
	Description field.String // 商品描述
	ClientIP    field.String // 用户的ip
	OrderTime   field.Time   // 下单时间
	ExpireTime  field.Time   // 订单过期时间
	PayTime     field.Time   // 第三方支付成功的时间
	NotifyTime  field.Time   // 收到异步通知的时间
	Extension   field.Field  // 扩展字段
	Status      field.Int32  // 0:待支付，1 :支付成功，2:已关闭，3:已退款, -1:支付失败
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p paymentRecord) Table(newTableName string) *paymentRecord {
	p.paymentRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentRecord) As(alias string) *paymentRecord {
	p.paymentRecordDo.DO = *(p.paymentRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentRecord) updateTableName(table string) *paymentRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Key = field.NewString(table, "key")
	p.OutTradeNo = field.NewString(table, "out_trade_no")
	p.TradeNo = field.NewString(table, "trade_no")
	p.PayMethod = field.NewString(table, "pay_method")
	p.TotalFee = field.NewInt64(table, "total_fee")
	p.Description = field.NewString(table, "description")
	p.ClientIP = field.NewString(table, "client_ip")
	p.OrderTime = field.NewTime(table, "order_time")
	p.ExpireTime = field.NewTime(table, "expire_time")
	p.PayTime = field.NewTime(table, "pay_time")
	p.NotifyTime = field.NewTime(table, "notify_time")
	p.Extension = field.NewField(table, "extension")
	p.Status = field.NewInt32(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *paymentRecord) WithContext(ctx context.Context) *paymentRecordDo {
	return p.paymentRecordDo.WithContext(ctx)
}

func (p paymentRecord) TableName() string { return p.paymentRecordDo.TableName() }

func (p paymentRecord) Alias() string { return p.paymentRecordDo.Alias() }

func (p *paymentRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["key"] = p.Key
	p.fieldMap["out_trade_no"] = p.OutTradeNo
	p.fieldMap["trade_no"] = p.TradeNo
	p.fieldMap["pay_method"] = p.PayMethod
	p.fieldMap["total_fee"] = p.TotalFee
	p.fieldMap["description"] = p.Description
	p.fieldMap["client_ip"] = p.ClientIP
	p.fieldMap["order_time"] = p.OrderTime
	p.fieldMap["expire_time"] = p.ExpireTime
	p.fieldMap["pay_time"] = p.PayTime
	p.fieldMap["notify_time"] = p.NotifyTime
	p.fieldMap["extension"] = p.Extension
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p paymentRecord) clone(db *gorm.DB) paymentRecord {
	p.paymentRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentRecord) replaceDB(db *gorm.DB) paymentRecord {
	p.paymentRecordDo.ReplaceDB(db)
	return p
}

type paymentRecordDo struct{ gen.DO }

func (p paymentRecordDo) Debug() *paymentRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentRecordDo) WithContext(ctx context.Context) *paymentRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentRecordDo) ReadDB() *paymentRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentRecordDo) WriteDB() *paymentRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentRecordDo) Session(config *gorm.Session) *paymentRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentRecordDo) Clauses(conds ...clause.Expression) *paymentRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentRecordDo) Returning(value interface{}, columns ...string) *paymentRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentRecordDo) Not(conds ...gen.Condition) *paymentRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentRecordDo) Or(conds ...gen.Condition) *paymentRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentRecordDo) Select(conds ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentRecordDo) Where(conds ...gen.Condition) *paymentRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *paymentRecordDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p paymentRecordDo) Order(conds ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentRecordDo) Distinct(cols ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentRecordDo) Omit(cols ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentRecordDo) Join(table schema.Tabler, on ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentRecordDo) Group(cols ...field.Expr) *paymentRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentRecordDo) Having(conds ...gen.Condition) *paymentRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentRecordDo) Limit(limit int) *paymentRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentRecordDo) Offset(offset int) *paymentRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentRecordDo) Unscoped() *paymentRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentRecordDo) Create(values ...*model.PaymentRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentRecordDo) CreateInBatches(values []*model.PaymentRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentRecordDo) Save(values ...*model.PaymentRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentRecordDo) First() (*model.PaymentRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentRecord), nil
	}
}

func (p paymentRecordDo) Take() (*model.PaymentRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentRecord), nil
	}
}

func (p paymentRecordDo) Last() (*model.PaymentRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentRecord), nil
	}
}

func (p paymentRecordDo) Find() ([]*model.PaymentRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentRecord), err
}

func (p paymentRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentRecord, err error) {
	buf := make([]*model.PaymentRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentRecordDo) FindInBatches(result *[]*model.PaymentRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentRecordDo) Attrs(attrs ...field.AssignExpr) *paymentRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentRecordDo) Assign(attrs ...field.AssignExpr) *paymentRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentRecordDo) Joins(fields ...field.RelationField) *paymentRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentRecordDo) Preload(fields ...field.RelationField) *paymentRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentRecordDo) FirstOrInit() (*model.PaymentRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentRecord), nil
	}
}

func (p paymentRecordDo) FirstOrCreate() (*model.PaymentRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentRecord), nil
	}
}

func (p paymentRecordDo) FindByPage(offset int, limit int) (result []*model.PaymentRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentRecordDo) Delete(models ...*model.PaymentRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentRecordDo) withDO(do gen.Dao) *paymentRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
