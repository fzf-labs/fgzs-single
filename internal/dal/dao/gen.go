// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Asset:            newAsset(db, opts...),
		AssetBusiness:    newAssetBusiness(db, opts...),
		AssetLog:         newAssetLog(db, opts...),
		FileUpload:       newFileUpload(db, opts...),
		PaymentRecord:    newPaymentRecord(db, opts...),
		SysAPI:           newSysAPI(db, opts...),
		SysAdmin:         newSysAdmin(db, opts...),
		SysDept:          newSysDept(db, opts...),
		SysDictionary:    newSysDictionary(db, opts...),
		SysJob:           newSysJob(db, opts...),
		SysLog:           newSysLog(db, opts...),
		SysPermMenu:      newSysPermMenu(db, opts...),
		SysRole:          newSysRole(db, opts...),
		User:             newUser(db, opts...),
		UserAuth:         newUserAuth(db, opts...),
		UserCancellation: newUserCancellation(db, opts...),
		UserFeedback:     newUserFeedback(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Asset            asset
	AssetBusiness    assetBusiness
	AssetLog         assetLog
	FileUpload       fileUpload
	PaymentRecord    paymentRecord
	SysAPI           sysAPI
	SysAdmin         sysAdmin
	SysDept          sysDept
	SysDictionary    sysDictionary
	SysJob           sysJob
	SysLog           sysLog
	SysPermMenu      sysPermMenu
	SysRole          sysRole
	User             user
	UserAuth         userAuth
	UserCancellation userCancellation
	UserFeedback     userFeedback
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Asset:            q.Asset.clone(db),
		AssetBusiness:    q.AssetBusiness.clone(db),
		AssetLog:         q.AssetLog.clone(db),
		FileUpload:       q.FileUpload.clone(db),
		PaymentRecord:    q.PaymentRecord.clone(db),
		SysAPI:           q.SysAPI.clone(db),
		SysAdmin:         q.SysAdmin.clone(db),
		SysDept:          q.SysDept.clone(db),
		SysDictionary:    q.SysDictionary.clone(db),
		SysJob:           q.SysJob.clone(db),
		SysLog:           q.SysLog.clone(db),
		SysPermMenu:      q.SysPermMenu.clone(db),
		SysRole:          q.SysRole.clone(db),
		User:             q.User.clone(db),
		UserAuth:         q.UserAuth.clone(db),
		UserCancellation: q.UserCancellation.clone(db),
		UserFeedback:     q.UserFeedback.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Asset:            q.Asset.replaceDB(db),
		AssetBusiness:    q.AssetBusiness.replaceDB(db),
		AssetLog:         q.AssetLog.replaceDB(db),
		FileUpload:       q.FileUpload.replaceDB(db),
		PaymentRecord:    q.PaymentRecord.replaceDB(db),
		SysAPI:           q.SysAPI.replaceDB(db),
		SysAdmin:         q.SysAdmin.replaceDB(db),
		SysDept:          q.SysDept.replaceDB(db),
		SysDictionary:    q.SysDictionary.replaceDB(db),
		SysJob:           q.SysJob.replaceDB(db),
		SysLog:           q.SysLog.replaceDB(db),
		SysPermMenu:      q.SysPermMenu.replaceDB(db),
		SysRole:          q.SysRole.replaceDB(db),
		User:             q.User.replaceDB(db),
		UserAuth:         q.UserAuth.replaceDB(db),
		UserCancellation: q.UserCancellation.replaceDB(db),
		UserFeedback:     q.UserFeedback.replaceDB(db),
	}
}

type queryCtx struct {
	Asset            *assetDo
	AssetBusiness    *assetBusinessDo
	AssetLog         *assetLogDo
	FileUpload       *fileUploadDo
	PaymentRecord    *paymentRecordDo
	SysAPI           *sysAPIDo
	SysAdmin         *sysAdminDo
	SysDept          *sysDeptDo
	SysDictionary    *sysDictionaryDo
	SysJob           *sysJobDo
	SysLog           *sysLogDo
	SysPermMenu      *sysPermMenuDo
	SysRole          *sysRoleDo
	User             *userDo
	UserAuth         *userAuthDo
	UserCancellation *userCancellationDo
	UserFeedback     *userFeedbackDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Asset:            q.Asset.WithContext(ctx),
		AssetBusiness:    q.AssetBusiness.WithContext(ctx),
		AssetLog:         q.AssetLog.WithContext(ctx),
		FileUpload:       q.FileUpload.WithContext(ctx),
		PaymentRecord:    q.PaymentRecord.WithContext(ctx),
		SysAPI:           q.SysAPI.WithContext(ctx),
		SysAdmin:         q.SysAdmin.WithContext(ctx),
		SysDept:          q.SysDept.WithContext(ctx),
		SysDictionary:    q.SysDictionary.WithContext(ctx),
		SysJob:           q.SysJob.WithContext(ctx),
		SysLog:           q.SysLog.WithContext(ctx),
		SysPermMenu:      q.SysPermMenu.WithContext(ctx),
		SysRole:          q.SysRole.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		UserAuth:         q.UserAuth.WithContext(ctx),
		UserCancellation: q.UserCancellation.WithContext(ctx),
		UserFeedback:     q.UserFeedback.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
